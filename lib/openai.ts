import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface ContractGenerationRequest {
  description: string
  variables: Array<{
    name: string
    type: string
    placeholder?: string
  }>
  dynamicFields: Array<{
    name: string
    type: string
    required?: boolean
  }>
  existingContent?: string
  mode?: 'generate' | 'adapt'
}

export interface ContractGenerationResponse {
  content: string
  suggestedDynamicFields: Array<{
    name: string
    type: 'text' | 'textarea' | 'number' | 'email' | 'phone' | 'checkbox' | 'date'
    required: boolean
    placeholder?: string
  }>
  title: string
  description: string
  contractType?: string
  needsMoreInfo?: string[]
}

export function createSystemPrompt(): string {
  return `Eres un experto legal especializado en la elaboraci√≥n de contratos legalmente vinculantes seg√∫n la legislaci√≥n espa√±ola. Tu tarea es generar contratos completos y jur√≠dicamente v√°lidos basados en las instrucciones del usuario, utilizando como base templates y modelos de contratos est√°ndar.

CONTEXTO T√âCNICO:
- Sistema de firma digital oSign.EU para Espa√±a
- Variables del sistema: Se referencian como {{variable:nombreVariable}}
- Campos din√°micos: Se referencian como {{dynamic:nombreCampo}}
- Formato de respuesta: JSON estricto

VARIABLES DISPONIBLES DEL SISTEMA (sin valores, solo nombres):
Las variables representan informaci√≥n del emisor del contrato y siempre est√°n disponibles:
- {{variable:fecha}} - Fecha actual autom√°tica
- {{variable:miNombre}} - Nombre del emisor
- {{variable:miDireccion}} - Direcci√≥n del emisor  
- {{variable:miTelefono}} - Tel√©fono del emisor
- {{variable:miIdentificacionFiscal}} - NIF/CIF del emisor
- {{variable:miEmail}} - Email del emisor
- {{variable:miCuentaBancaria}} - Cuenta bancaria del emisor

CAMPOS DIN√ÅMICOS PREDETERMINADOS:
Siempre incluir estos campos obligatorios para cumplimiento legal:
- {{dynamic:clientName}} - Nombre completo del cliente/firmante
- {{dynamic:clientTaxId}} - NIF/DNI/CIF del cliente

BIBLIOTECA DE TEMPLATES DE CONTRATOS EST√ÅNDAR:

1. CONTRATO DE SERVICIOS PROFESIONALES:
- Consultor√≠as, asesor√≠as, servicios t√©cnicos
- Cl√°usulas: objeto del servicio, duraci√≥n, retribuci√≥n, entregables, confidencialidad, propiedad intelectual
- Campos cliente t√≠picos: direcci√≥n, sector empresa, persona contacto

2. CONTRATO DE DESARROLLO SOFTWARE:
- Aplicaciones, webs, sistemas, mantenimiento
- Cl√°usulas: especificaciones t√©cnicas, cronograma, soporte, licencias, c√≥digo fuente
- Campos cliente t√≠picos: requerimientos t√©cnicos, plataformas objetivo

3. CONTRATO DE PRESTACI√ìN DE SERVICIOS:
- Servicios generales, limpieza, mantenimiento, seguridad
- Cl√°usulas: periodicidad, materiales, personal, responsabilidades
- Campos cliente t√≠picos: horarios, ubicaci√≥n del servicio

4. CONTRATO DE COMPRAVENTA:
- Bienes muebles, equipos, productos
- Cl√°usulas: entrega, garant√≠as, riesgo, inspecci√≥n, devoluciones
- Campos cliente t√≠picos: direcci√≥n entrega, condiciones especiales

5. CONTRATO DE ARRENDAMIENTO/ALQUILER:
- Locales, equipos, veh√≠culos
- Cl√°usulas: duraci√≥n, renta, fianza, uso permitido, mantenimiento
- Campos cliente t√≠picos: referencias, uso previsto

6. CONTRATO DE DISTRIBUCI√ìN/COMERCIALIZACI√ìN:
- Productos, territorial, exclusividad
- Cl√°usulas: territorio, objetivos, marketing, comisiones
- Campos cliente t√≠picos: zona geogr√°fica, experiencia comercial

7. CONTRATO DE FORMACI√ìN/CAPACITACI√ìN:
- Cursos, talleres, certificaciones
- Cl√°usulas: programa, duraci√≥n, certificados, materiales
- Campos cliente t√≠picos: nivel conocimientos, modalidad preferida

8. CONTRATO DE LICENCIA:
- Software, marcas, patentes, uso tecnolog√≠a
- Cl√°usulas: alcance licencia, restricciones, royalties
- Campos cliente t√≠picos: uso previsto, volumen

L√ìGICA DE IDENTIFICACI√ìN DE TEMPLATES:
1. Analiza las palabras clave en la descripci√≥n del usuario
2. Identifica el tipo de contrato m√°s cercano de los templates disponibles
3. Utiliza la estructura y cl√°usulas del template como base
4. Adapta el contenido espec√≠fico seg√∫n la descripci√≥n del usuario
5. Incluye todas las cl√°usulas est√°ndar del tipo de contrato identificado

CRITERIOS PARA CAMPOS DIN√ÅMICOS VS INFORMACI√ìN FALTANTE:
üî¥ NO crear campos din√°micos para:
- Informaci√≥n que debe proporcionar la empresa (duraci√≥n del contrato, jurisdicci√≥n, condiciones espec√≠ficas, tarifas, penalizaciones, etc.)
- Datos t√©cnicos o legales del servicio/producto
- T√©rminos comerciales definidos por la empresa
- Informaci√≥n corporativa o empresarial

‚úÖ S√ç crear campos din√°micos SOLO para:
- Informaci√≥n personal del cliente/firmante (nombre, identificaci√≥n, contacto, direcci√≥n)
- Datos espec√≠ficos del cliente que var√≠an por cada firma
- Informaci√≥n espec√≠fica del servicio que proporciona el cliente (direcciones de entrega, horarios, especificaciones del cliente)
- Preferencias del cliente (checkbox para aceptar t√©rminos espec√≠ficos)

‚ö†Ô∏è REGLA CR√çTICA - NO DUPLICAR INFORMACI√ìN:
- Si una informaci√≥n se pide en "needsMoreInfo", NO crear campo din√°mico para lo mismo
- Si se proporciona informaci√≥n en Q&A, incluirla directamente en el contrato, NO como campo din√°mico
- Los campos din√°micos son EXCLUSIVAMENTE para datos que el cliente/firmante debe proporcionar al firmar

COMPORTAMIENTO ROBUSTO:
1. Identifica el template de contrato m√°s apropiado basado en la descripci√≥n
2. Si faltan datos empresariales esenciales, pregunta en "needsMoreInfo"
3. Genera un contrato completo basado en el template identificado
4. Solo crea campos din√°micos para informaci√≥n genuina del cliente/firmante
5. Incluye todas las cl√°usulas est√°ndar del tipo de contrato

FORMATO DE RESPUESTA (JSON v√°lido):
{
  "title": "T√≠tulo descriptivo del contrato",
  "description": "Breve descripci√≥n del prop√≥sito",
  "content": "Contenido HTML del contrato - MANT√âN CONCISO pero completo, usar <p> para p√°rrafos y <br> para saltos",
  "contractType": "Tipo de contrato identificado del template",
  "suggestedDynamicFields": [
    {
      "name": "nombreCampo",
      "type": "text|textarea|number|email|phone|checkbox|date",
      "required": true|false,
      "placeholder": "Texto de ayuda opcional"
    }
  ],
  "needsMoreInfo": [
    "¬øCu√°l es la duraci√≥n del contrato?",
    "¬øCu√°l es el precio o tarifa del servicio?"
  ]
}

IMPORTANTE PARA EL CONTENIDO:
- Mant√©n el contenido del contrato CONCISO pero legalmente completo
- Usa estructuras claras con <p> para p√°rrafos
- Evita repeticiones innecesarias
- Incluye las cl√°usulas esenciales del template identificado
- NO incluyas opciones m√∫ltiples en el mismo contrato (elige la m√°s apropiada)
- ELIMINAR COMPLETAMENTE cualquier l√≠nea de firma manuscrita, espacios para firmas, o referencias a "firma en todas las hojas"
- NO incluir texto como "Por___ Por___", l√≠neas de guiones para firmar, o cualquier elemento de firma f√≠sica
- El sistema usa firma digital, por lo que NO se requieren elementos de firma manuscrita

INSTRUCCIONES DE GENERACI√ìN:
1. IDENTIFICA el template de contrato m√°s apropiado
2. ANALIZA la descripci√≥n para identificar informaci√≥n faltante esencial EMPRESARIAL
3. GENERA un contrato completo basado en el template, con todas sus cl√°usulas est√°ndar
4. USA variables {{variable:X}} para informaci√≥n del emisor
5. USA {{dynamic:clientName}} y {{dynamic:clientTaxId}} obligatoriamente
6. A√ëADE campos din√°micos SOLO para datos genuinos del cliente/firmante
7. SI faltan datos empresariales cr√≠ticos, lista en "needsMoreInfo"
8. ELIMINA COMPLETAMENTE cualquier elemento de firma manuscrita (l√≠neas, espacios, "Por___", etc.)

INSTRUCCIONES DE ADAPTACI√ìN (cuando se proporciona contenido existente):
1. ANALIZA el contrato existente para identificar su tipo y estructura
2. IDENTIFICA informaci√≥n del emisor (nombres, direcciones, etc.) y reempl√°zala con variables {{variable:X}}
3. IDENTIFICA informaci√≥n del cliente/firmante y reempl√°zala con campos din√°micos {{dynamic:X}}
4. CONVIERTE el formato a HTML estructurado con p√°rrafos <p> y listas
5. MANT√âN todo el contenido legal original pero adaptado al formato del sistema
6. AGREGA cl√°usulas faltantes seg√∫n el template identificado (si es necesario)
7. ASEGURA que cumple con los requisitos legales espa√±oles
8. SUGIERE campos din√°micos apropiados basados en la informaci√≥n del cliente encontrada

REQUISITOS LEGALES ESPA√ëA:
- Identificaci√≥n completa de las partes (nombres, NIF/DNI)
- Objeto del contrato claramente definido seg√∫n el template
- Condiciones y obligaciones espec√≠ficas del tipo de contrato
- Cl√°usulas de resoluci√≥n y incumplimiento est√°ndar
- Jurisdicci√≥n y ley aplicable espa√±ola
- Lugar y fecha de firma
- Todas las cl√°usulas t√≠picas del tipo de contrato identificado

IMPORTANTE:
- SIEMPRE basar el contrato en uno de los templates est√°ndar identificados
- NO duplicar informaci√≥n entre needsMoreInfo y campos din√°micos
- Distinguir claramente entre datos de la empresa vs datos del cliente
- Generar contratos completos y profesionales basados en templates probados
- Incluir todas las cl√°usulas est√°ndar del tipo de contrato
- Respuesta √∫nicamente en JSON v√°lido
- Contenido en HTML con p√°rrafos <p> y listas <ul>/<ol>
- Cl√°usulas numeradas y bien estructuradas seg√∫n el template
- Lenguaje jur√≠dico apropiado pero comprensible
- Adaptado espec√≠ficamente a legislaci√≥n espa√±ola`
}

export async function generateContract(request: ContractGenerationRequest): Promise<ContractGenerationResponse> {
  try {
    const systemPrompt = createSystemPrompt()
    
    let userPrompt = ''
    
    if (request.mode === 'adapt' && request.existingContent) {
      userPrompt = `
MODO ADAPTACI√ìN: Convierte el siguiente contrato existente al formato del sistema oSign.EU.

CONTRATO EXISTENTE:
"${request.existingContent}"

DESCRIPCI√ìN ADICIONAL DEL USUARIO:
"${request.description}"

INSTRUCCIONES:
1. Analiza el contrato existente e identifica su tipo
2. Convierte informaci√≥n del emisor a variables {{variable:X}}
3. Convierte informaci√≥n del cliente a campos din√°micos {{dynamic:X}}
4. Mant√©n todo el contenido legal pero adaptado al formato HTML
5. Agrega campos obligatorios clientName y clientTaxId si no existen
6. Sugiere campos din√°micos apropiados basados en el contenido

Variables disponibles: ${request.variables.map(v => v.name).join(', ')}
Campos existentes: ${request.dynamicFields.map(f => f.name).join(', ')}
`
    } else {
      userPrompt = `
MODO GENERACI√ìN: Genera un contrato desde cero basado en la descripci√≥n.

DESCRIPCI√ìN:
"${request.description}"

Variables disponibles en el sistema: ${request.variables.map(v => v.name).join(', ')}
Campos din√°micos existentes: ${request.dynamicFields.map(f => f.name).join(', ')}

Crea un contrato completo, legalmente v√°lido para Espa√±a, que incluya los campos obligatorios clientName y clientTaxId, y a√±ade cualquier campo din√°mico adicional que consideres necesario para este tipo de contrato.
`
    }

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini', // Cost-effective model as requested
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user', 
          content: userPrompt
        }
      ],
      temperature: 0.3, // Low temperature for consistency
      max_tokens: 8000, // Increased to handle longer contracts
    })

    const response = completion.choices[0]?.message?.content
    if (!response) {
      throw new Error('No response from OpenAI')
    }

    // Clean and parse JSON response
    let parsedResponse: ContractGenerationResponse
    try {
      // Remove markdown code blocks if present
      let cleanResponse = response.trim()

      // Remove ```json at the beginning
      if (cleanResponse.startsWith('```json')) {
        cleanResponse = cleanResponse.substring(7)
      }

      // Remove ``` at the end
      if (cleanResponse.endsWith('```')) {
        cleanResponse = cleanResponse.substring(0, cleanResponse.length - 3)
      }

      // Remove any remaining backticks at start/end
      cleanResponse = cleanResponse.replace(/^`+|`+$/g, '').trim()

      // Check if the response seems truncated (missing closing brace)
      const openBraces = (cleanResponse.match(/\{/g) || []).length
      const closeBraces = (cleanResponse.match(/\}/g) || []).length

      if (openBraces > closeBraces) {
        console.warn('Response appears truncated, attempting to fix...')
        // Try to add missing closing braces
        const missingBraces = openBraces - closeBraces
        cleanResponse += '}}'.repeat(missingBraces)
      }

      // Try to fix common JSON issues in the content field
      if (cleanResponse.includes('"content":')) {
        // Find the content field and try to fix unterminated strings
        const contentMatch = cleanResponse.match(/"content":\s*"/)
        if (contentMatch) {
          const contentStart = cleanResponse.indexOf('"content":"') + 11
          const remaining = cleanResponse.substring(contentStart)

          // Look for the end of the content field (where the next JSON field starts)
          const nextFieldMatch = remaining.match(/",\s*"[a-zA-Z]+":/)
          if (!nextFieldMatch) {
            // Content field is not properly closed, try to find a reasonable end
            console.warn('Content field appears unterminated, attempting to truncate and close...')
            // Find last complete sentence or clause
            const lastPeriod = remaining.lastIndexOf('.')
            const lastClause = remaining.lastIndexOf('<br>')
            const cutPoint = Math.max(lastPeriod, lastClause)

            if (cutPoint > 0) {
              const truncatedContent = remaining.substring(0, cutPoint + (lastPeriod > lastClause ? 1 : 4))
              cleanResponse = cleanResponse.substring(0, contentStart) +
                             truncatedContent +
                             '", "suggestedDynamicFields": [], "needsMoreInfo": []}'
            }
          }
        }
      }

      parsedResponse = JSON.parse(cleanResponse)
    } catch (parseError) {
      console.error('Raw AI response length:', response.length)
      console.error('Clean response length:', cleanResponse?.length || 0)
      console.error('Parse error:', parseError)

      // Try a fallback approach - extract what we can
      try {
        const titleMatch = response.match(/"title":\s*"([^"]+)"/)
        const descMatch = response.match(/"description":\s*"([^"]+)"/)
        const contentMatch = response.match(/"content":\s*"(.*?)(?:",\s*"[a-zA-Z]+"|$)/)

        if (titleMatch && contentMatch) {
          console.log('Using fallback JSON parsing...')
          parsedResponse = {
            title: titleMatch[1],
            description: descMatch?.[1] || 'Contrato generado por IA',
            content: contentMatch[1].replace(/\\"/g, '"').replace(/\\n/g, '<br>'),
            suggestedDynamicFields: [
              { name: 'clientName', type: 'text', required: true, placeholder: 'Nombre completo del cliente' },
              { name: 'clientTaxId', type: 'text', required: true, placeholder: 'NIF/DNI/CIF del cliente' }
            ],
            contractType: 'Acuerdo de Confidencialidad',
            needsMoreInfo: []
          }
        } else {
          throw new Error('Could not extract minimum required fields from AI response')
        }
      } catch (fallbackError) {
        console.error('Fallback parsing also failed:', fallbackError)
        throw new Error('Invalid JSON response from AI: ' + parseError)
      }
    }

    // Validate required fields
    if (!parsedResponse.content || !parsedResponse.title) {
      throw new Error('AI response missing required fields')
    }

    // Ensure mandatory fields are included
    if (!parsedResponse.suggestedDynamicFields) {
      parsedResponse.suggestedDynamicFields = []
    }

    // Add mandatory fields if not present
    const hasClientName = parsedResponse.suggestedDynamicFields.some(f => f.name === 'clientName')
    const hasClientTaxId = parsedResponse.suggestedDynamicFields.some(f => f.name === 'clientTaxId')

    if (!hasClientName) {
      parsedResponse.suggestedDynamicFields.unshift({
        name: 'clientName',
        type: 'text',
        required: true,
        placeholder: 'Nombre completo del cliente'
      })
    }

    if (!hasClientTaxId) {
      parsedResponse.suggestedDynamicFields.unshift({
        name: 'clientTaxId', 
        type: 'text',
        required: true,
        placeholder: 'NIF/DNI/CIF del cliente'
      })
    }

    return parsedResponse

  } catch (error) {
    console.error('Error generating contract with OpenAI:', error)
    throw error
  }
}

export async function calculateTokenUsage(text: string): Promise<number> {
  // Rough estimation: 1 token ‚âà 4 characters for Spanish text
  return Math.ceil(text.length / 4)
}

export function calculateCost(inputTokens: number, outputTokens: number): number {
  // GPT-4o-mini pricing (as of 2024)
  const INPUT_COST_PER_1K = 0.00015  // $0.150 per 1K tokens
  const OUTPUT_COST_PER_1K = 0.0006  // $0.600 per 1K tokens
  
  const inputCost = (inputTokens / 1000) * INPUT_COST_PER_1K
  const outputCost = (outputTokens / 1000) * OUTPUT_COST_PER_1K
  
  return inputCost + outputCost
}